<!DOCTYPE html>
<!-- saved from url=(0081)https://www.developphp.com/video/CSS/Video-Background-Tutorial-Plus-Youtube-Embed -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="author" content="Adam Khoury">
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="Keywords" content="CSS, Video Background Tutorial Plus Youtube Embed, Background and Overlay Effects, video, tutorial, training, learn, guide, code, script, program, application, software, development, web, site, school, education, class, website, online, course, free, adam khoury">
<meta name="Description" content="Video: Video Background Tutorial Plus Youtube Embed. This tutorial resides in the CSS video index under the Background and Overlay Effects section. If you find this lesson useful, we have many more exercises that are sure to please you.">
<title>CSS Video Background Tutorial Plus Youtube Embed</title>
<link rel="icon" href="https://www.developphp.com/favicon.ico" type="image/x-icon">
<link rel="stylesheet" href="./CSS Video Background Tutorial Plus Youtube Embed_files/main3.css">
<link rel="stylesheet" href="./CSS Video Background Tutorial Plus Youtube Embed_files/ash.css">
<script src="./CSS Video Background Tutorial Plus Youtube Embed_files/main1.js"></script>
<script src="./CSS Video Background Tutorial Plus Youtube Embed_files/ash.js"></script>
<style>
.ad_leaderboard { padding:30px 0px; text-align:center; }
#ad_160x600 { float:right; width:160px; height:600px; margin:0px 0px 0px 25px; }
.ad_mobile { display:none; clear:left; background:#FFF; width:auto; padding:0px 0px 20px 0px; text-align:center; }

.banner_on_tuts { padding:0px 0px 30px 0px; text-align:center; }
.banner_on_tuts_mobile { display:none; height:auto; text-align:center; }

#social{ position:fixed; top:230px; left:0px; width:50px; height:auto; padding:12px 0px; background:#EFEFEF; border-radius: 0px 7px 7px 0px; border:1px solid #AAA; text-align:center; transition: width 0.2s linear 0s; }
#social:hover{ width:80px; }
#social > button{ display:block; background-color:transparent; background-image:url(/style/share_icon.png); width:36px; height:36px; border:none; cursor:pointer; margin:4px auto; opacity:0.6; transition: opacity 0.2s linear 0s; }
#social > button:hover{ opacity:1; }
#social > button:nth-child(1){background-position:0px;}
#social > button:nth-child(2){background-position:-36px;}
#social > button:nth-child(3){background-position:-72px;}
#social > button:nth-child(4){background-position:-252px;}

#contentbody{ float:left; width:78%; padding:0px; margin-bottom:200px; }
#contentbody > #contentbodychild{ min-height:700px; border:1px solid #666; border-left:none; background:#FFF; padding:20px 25px 80px 80px; }
#contentbody > #contentbodychild > h1{ }
#contentbody > #contentbodychild > h2{ }

#rel_tuts{ float:left; width:22%; }
#rel_tuts > div{ padding:0px 0px 50px 0px; }
#rel_tuts > div > h3 { margin:0px; padding:10px 0px 10px 15px; }
#rel_tuts > div > h3 > a { text-decoration:none; }
#rel_tuts > div > h4 { margin:0px; padding:10px 0px 10px 25px; color:#333; }
#rel_tuts > div > h4 > a { text-decoration:none; }
#rel_tuts > div > a { display:block; height:24px; overflow:hidden; margin:0px; padding:3px 0px 3px 25px; line-height:2.0em; text-decoration:none; font-size:15px; }
#rel_tuts > div > a:hover { text-decoration:underline; }
#rel_tuts > div > a:before { content:url(/style/ul_doc.png) " "; }
#rel_tuts > div > span { display:block; position:relative; right:1px; height:24px; overflow:hidden; margin:0px; padding:0px 20px 6px 25px; line-height:2.0em; background:#FFF; color:#666; font-size:15px; border:1px solid #777; border-left:none; border-right:none;}
#rel_tuts > div > span:before { content:url(/style/ul_doc.png) " "; }

#db_body > div {clear:left; white-space:-moz-pre-wrap; white-space:-o-pre-wrap; white-space:pre-wrap; word-wrap:break-word; line-height:1.5em; margin:0px 0px 0px 0px;}
#db_body > div > p > a{ text-decoration: underline; }
#db_body > div > p{ margin:0px; padding:0px; }
#db_body > div > h1,h3,h4{ margin:0px 0px 7px 0px; font-weight:bold; }
#db_body > div > h2{ margin:0px 0px 0px 0px; padding-top:30px; font-size:21px; }
#db_body > div > ul,ol > li{ line-height:0.7em; }
#db_body > div > small{ }
#db_body > div > small > a{ text-decoration:underline; }
#db_body > div > small > b{ color: #999; }
#db_body > div > small > em{ color:#F60; font-weight:bold; }
#db_body > div > fieldset{ background:#222; border:none; border-radius:4px; font-size:0.95em; font-family:"Courier New", Courier, monospace; color: #CCC; font-style: normal; padding-left:20px; }
#db_body > div > fieldset > legend{background:#222; border-bottom:none; border-radius:4px 4px 0px 0px; font-size:0.65em; letter-spacing:1px; color: #FAA901; padding:0px 10px; height:20px; font-weight:bold; font-family:Arial, Helvetica, sans-serif; font-style:normal; }
#db_body > div > hr{ background:#CCC; height:1px; border: none;}
.docsniplink{display:inline-block; float:left; margin-left:10px; background:#FFF linear-gradient(#EAF4FF, #D2E9FF); border:#95CAFF 1px solid; border-top:none; font-size:13px; padding:0px 10px; color: #06C; text-decoration:none;}
.docsniplink:hover{border: #06C 1px solid; border-top:none; text-decoration:none;  }

div#videobox{ margin: 0px auto 0px auto; width:700px; height:394px; z-index:5;}
div#videobox > iframe{ border:none; width:700px; height:394px; }
img#vid_thumb{visibility:hidden; width:10px;}
@media screen and (max-device-width: 1100px) {
.ad_leaderboard { display:none; }
#ad_160x600 {display:none;}
.ad_mobile { display:block; }
.banner1 { display:none; }
.banner1mobile { display:block; }
#social{ display:none; }
#contentbody{ font-size:12px; float:none; width:auto; margin-right:0px; padding:0px; overflow-x:hidden; }
#contentbody > #contentbodychild{ min-height:500px; border:none; padding:20px; box-shadow:none; }
#contentbody > #contentbodychild > h1{ font-weight:bold; margin:0px 0px 0px 0px; font-size:14px; }
#contentbody > #contentbodychild > h2{ font-weight:bold; margin:0px 0px 0px 0px; font-size:12px; }
#rel_tuts{ float:none; width:auto; background:#FFF; }
#rel_tuts > div{ min-height:50px; padding-bottom:30px; font-size:12px; }
#rel_tuts > div > h3 { background:#FFF; margin:40px 0px 0px 0px; padding:40px 0px 8px 10px; border-top:3px solid #DDD; }
#rel_tuts > div > h4 { background:#FFF; font-size:13px; }
#rel_tuts > div > a { font-size:12px; }
#rel_tuts > div > span { font-size:12px; }
#db_body > div {white-space:-moz-pre-wrap; white-space:-o-pre-wrap; white-space:pre-wrap; word-wrap:break-word; line-height:1.5em; margin:0px 0px;}
#db_body > div > fieldset{ background:#222; border:none; border-radius:4px; font-size:9px; font-family:"Courier New", Courier, monospace; color: #CCC; font-style: normal; padding-left:10px; }
#db_body > div > h2{ margin:0px 0px 0px 0px; font-weight:bold; border-top:#CCC 1px solid; padding-top:10px; font-size:12px; }
#db_body > div > h1{ font-weight:bold; font-size:12px; }
.docsniplink{display:inline-block; float:left; margin-left:10px; background:#FFF linear-gradient(#EAF4FF, #D2E9FF); border:#95CAFF 1px solid; border-top:none; font-size:10px; padding:0px 10px; color: #06C; text-decoration:none;}
code{ font-size:8px; }

div#videobox{ margin: 10px auto 10px auto; width:300px; height:169px;}
div#videobox > iframe{ border:none; width:300px; height:169px; }
}
</style>
<script type="text/javascript" src="chrome-extension://bfbmjmiodbnnpllbbbfblcplfjjepjdn/js/injected.js"></script></head><script>function inject(){function a(){function a(a){parent.postMessage({type:"blockedWindow",args:JSON.stringify(a)},l)}function b(a){var b=a[1];return null!=b&&["_blank","_parent","_self","_top"].indexOf(b)<0?b:null}function e(a,b){var c;for(c in a)try{void 0===b[c]&&(b[c]=a[c])}catch(d){}return b}var g=arguments,h=!0,j=null,k=null;if(null!=window.event&&(k=window.event.currentTarget),null==k){for(var m=g.callee;null!=m.arguments&&null!=m.arguments.callee.caller;)m=m.arguments.callee.caller;null!=m.arguments&&m.arguments.length>0&&null!=m.arguments[0].currentTarget&&(k=m.arguments[0].currentTarget)}null!=k&&(k instanceof Window||k===document||null!=k.URL&&null!=k.body||null!=k.nodeName&&("body"==k.nodeName.toLowerCase()||"#document"==k.nodeName.toLowerCase()))?(window.pbreason="Blocked a new window opened with URL: "+g[0]+" because it was triggered by the "+k.nodeName+" element",h=!1):h=!0;document.webkitFullscreenElement||document.mozFullscreenElement||document.fullscreenElement;if(((new Date).getTime()-d<1e3||isNaN(d)&&c())&&(window.pbreason="Blocked a new window opened with URL: "+g[0]+" because a full screen was just initiated while opening this url.",document.exitFullscreen?document.exitFullscreen():document.mozCancelFullScreen?document.mozCancelFullScreen():document.webkitCancelFullScreen&&document.webkitCancelFullScreen(),h=!1),1==h){j=f.apply(this,g);var n=b(g);if(null!=n&&(i[n]=j),j!==window){var o=(new Date).getTime(),p=j.blur;j.blur=function(){(new Date).getTime()-o<1e3?(window.pbreason="Blocked a new window opened with URL: "+g[0]+" because a it was blured",j.close(),a(g)):p()}}}else{var q={href:g[0]};q.replace=function(a){q.href=a},j={close:function(){return!0},test:function(){return!0},blur:function(){return!0},focus:function(){return!0},showModelessDialog:function(){return!0},showModalDialog:function(){return!0},prompt:function(){return!0},confirm:function(){return!0},alert:function(){return!0},moveTo:function(){return!0},moveBy:function(){return!0},resizeTo:function(){return!0},resizeBy:function(){return!0},scrollBy:function(){return!0},scrollTo:function(){return!0},getSelection:function(){return!0},onunload:function(){return!0},print:function(){return!0},open:function(){return this},opener:window,closed:!1,innerHeight:480,innerWidth:640,name:g[1],location:q,document:{location:q}},e(window,j),j.window=j;var n=b(g);if(null!=n)try{i[n].close()}catch(r){}setTimeout(function(){var b;b=j.location instanceof Object?j.document.location instanceof Object?null!=q.href?q.href:g[0]:j.document.location:j.location,g[0]=b,a(g)},100)}return j}function b(a){d=a?(new Date).getTime():0/0}function c(){return document.fullScreenElement&&null!==document.fullScreenElement||null!=document.mozFullscreenElement||null!=document.webkitFullscreenElement}var d,e="originalOpenFunction",f=window.open,g=document.createElement,h=document.createEvent,i={},j=0,k=null,l=window.location!=window.parent.location?document.referrer:document.location;window[e]=window.open,window.open=function(){try{return a.apply(this,arguments)}catch(b){return null}},document.createElement=function(){var a=g.apply(document,arguments);if("a"==arguments[0]||"A"==arguments[0]){j=(new Date).getTime();var b=a.dispatchEvent;a.dispatchEvent=function(c){return null!=c.type&&"click"==(""+c.type).toLocaleLowerCase()?(window.pbreason="blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag",parent.postMessage({type:"blockedWindow",args:JSON.stringify({0:a.href})},l),!0):b(c)},k=a}return a},document.createEvent=function(){try{return arguments[0].toLowerCase().indexOf("mouse")>=0&&(new Date).getTime()-j<=50?(window.pbreason="Blocked because 'a' element was recently created and "+arguments[0]+" event was created shortly after",arguments[0]=k.href,parent.postMessage({type:"blockedWindow",args:JSON.stringify({0:k.href})},l),null):h.apply(document,arguments)}catch(a){}},document.addEventListener("fullscreenchange",function(){b(document.fullscreen)},!1),document.addEventListener("mozfullscreenchange",function(){b(document.mozFullScreen)},!1),document.addEventListener("webkitfullscreenchange",function(){b(document.webkitIsFullScreen)},!1)} inject()</script><script>function inject() {

	var originalOpenWndFnKey = "originalOpenFunction";

			var originalWindowOpenFn 	= window.open,
			    originalCreateElementFn = document.createElement,
			    originalCreateEventFn 	= document.createEvent,
				windowsWithNames = {};
			var timeSinceCreateAElement = 0;
			var lastCreatedAElement = null;
			var fullScreenOpenTime;
			var parentOrigin = (window.location != window.parent.location) ? document.referrer: document.location;

			window[originalOpenWndFnKey] = window.open; // save the original open window as global param

			function newWindowOpenFn() {

				var openWndArguments = arguments,
					useOriginalOpenWnd = true,
					generatedWindow = null;

				function blockedWndNotification(openWndArguments) {
					parent.postMessage({ type: "blockedWindow", args: JSON.stringify(openWndArguments) }, parentOrigin);
				}

				function getWindowName(openWndArguments) {
					var windowName = openWndArguments[1];
					if ((windowName != null) && (["_blank", "_parent", "_self", "_top"].indexOf(windowName) < 0)) {
						return windowName;
					}

					return null;
				}

				function copyMissingProperties(src, dest) {
					var prop;
					for(prop in src) {
						try {
							if (dest[prop] === undefined) {
								dest[prop] = src[prop];
						}
						} catch (e) {}
					}
					return dest;
				}

					// the element who registered to the event
					var capturingElement = null;
					if (window.event != null) {
						capturingElement = window.event.currentTarget;
					}

					if (capturingElement == null) {
						var caller = openWndArguments.callee;
						while ((caller.arguments != null) && (caller.arguments.callee.caller != null)) {
							caller = caller.arguments.callee.caller;
						}
						if ((caller.arguments != null) && (caller.arguments.length > 0) && (caller.arguments[0].currentTarget != null)) {
							capturingElement = caller.arguments[0].currentTarget;
						}
					}

				/////////////////////////////////////////////////////////////////////////////////
				// Blocked if a click on background element occurred (<body> or document)
				/////////////////////////////////////////////////////////////////////////////////

					if ((capturingElement != null) && (
							(capturingElement instanceof Window) ||
							(capturingElement === document) ||
							(
								(capturingElement.URL != null) && (capturingElement.body != null)
							) ||
							(
								(capturingElement.nodeName != null) && (
									(capturingElement.nodeName.toLowerCase() == "body") ||
									(capturingElement.nodeName.toLowerCase() == "#document")
								)
							)
						)) {
							window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because it was triggered by the " + capturingElement.nodeName + " element";
							// console.info(window.pbreason);
							useOriginalOpenWnd = false;
					} else {
						useOriginalOpenWnd = true;
					}
				/////////////////////////////////////////////////////////////////////////////////



				/////////////////////////////////////////////////////////////////////////////////
				// Block if a full screen was just initiated while opening this url.
				/////////////////////////////////////////////////////////////////////////////////

					// console.info("fullscreen: " + ((new Date()).getTime() - fullScreenOpenTime));
					// console.info("webkitFullscreenElement: " + document.webkitFullscreenElement);
					var fullScreenElement = document.webkitFullscreenElement || document.mozFullscreenElement || document.fullscreenElement
					if ((((new Date()).getTime() - fullScreenOpenTime) < 1000) || ((isNaN(fullScreenOpenTime) && (isDocumentInFullScreenMode())))) {

						window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a full screen was just initiated while opening this url.";
						// console.info(window.pbreason);

						/* JRA REMOVED
						if (window[script_params.fullScreenFnKey]) {
							window.clearTimeout(window[script_params.fullScreenFnKey]);
						}
						*/

						if (document.exitFullscreen) {
							document.exitFullscreen();
						}
						else if (document.mozCancelFullScreen) {
							document.mozCancelFullScreen();
						}
						else if (document.webkitCancelFullScreen) {
							document.webkitCancelFullScreen();
						}

						useOriginalOpenWnd = false;
					}
				/////////////////////////////////////////////////////////////////////////////////


				if (useOriginalOpenWnd == true) {

					// console.info("allowing new window to be opened with URL: " + openWndArguments[0]);

					generatedWindow = originalWindowOpenFn.apply(this, openWndArguments);

					// save the window by name, for latter use.
					var windowName = getWindowName(openWndArguments);
					if (windowName != null) {
						windowsWithNames[windowName] = generatedWindow;
					}

					// 2nd line of defence: allow window to open but monitor carefully...

					/////////////////////////////////////////////////////////////////////////////////
					// Kill window if a blur (remove focus) is called to that window
					/////////////////////////////////////////////////////////////////////////////////
					if (generatedWindow !== window) {
						var openTime = (new Date()).getTime();
						var originalWndBlurFn = generatedWindow.blur;
						generatedWindow.blur = function() {
							if (((new Date()).getTime() - openTime) < 1000 /* one second */) {
								window.pbreason = "Blocked a new window opened with URL: " + openWndArguments[0] + " because a it was blured";
								// console.info(window.pbreason);
								generatedWindow.close();
								blockedWndNotification(openWndArguments);
							} else {
								// console.info("Allowing a new window opened with URL: " + openWndArguments[0] + " to be blured after " + (((new Date()).getTime() - openTime)) + " seconds");
								originalWndBlurFn();
							}
						};
					}
					/////////////////////////////////////////////////////////////////////////////////

				} else { // (useOriginalOpenWnd == false)

						var location = {
							href: openWndArguments[0]
						};
						location.replace = function(url) {
							location.href = url;
						};

						generatedWindow = {
							close:						function() {return true;},
							test:						function() {return true;},
							blur:						function() {return true;},
							focus:						function() {return true;},
							showModelessDialog:			function() {return true;},
							showModalDialog:			function() {return true;},
							prompt:						function() {return true;},
							confirm:					function() {return true;},
							alert:						function() {return true;},
							moveTo:						function() {return true;},
							moveBy:						function() {return true;},
							resizeTo:					function() {return true;},
							resizeBy:					function() {return true;},
							scrollBy:					function() {return true;},
							scrollTo:					function() {return true;},
							getSelection:				function() {return true;},
							onunload:					function() {return true;},
							print:						function() {return true;},
							open:						function() {return this;},
							opener:						window,
							closed:						false,
							innerHeight:				480,
							innerWidth:					640,
							name:						openWndArguments[1],
							location:					location,
							document:					{location: location}
						};

					copyMissingProperties(window, generatedWindow);

					generatedWindow.window = generatedWindow;

					var windowName = getWindowName(openWndArguments);
					if (windowName != null) {
						try {
							// originalWindowOpenFn("", windowName).close();
							windowsWithNames[windowName].close();
							// console.info("Closed window with the following name: " + windowName);
						} catch (err) {
							// console.info("Couldn't close window with the following name: " + windowName);
						}
					}

					setTimeout(function() {
						var url;
						if (!(generatedWindow.location instanceof Object)) {
							url = generatedWindow.location;
						} else if (!(generatedWindow.document.location instanceof Object)) {
							url = generatedWindow.document.location;
						} else if (location.href != null) {
							url = location.href;
						} else {
							url = openWndArguments[0];
						}
						openWndArguments[0] = url;
						blockedWndNotification(openWndArguments);
					}, 100);
				}

				return generatedWindow;
			}


			/////////////////////////////////////////////////////////////////////////////////
			// Replace the window open method with Poper Blocker's
			/////////////////////////////////////////////////////////////////////////////////
			window.open = function() {
				try {
					return newWindowOpenFn.apply(this, arguments);
				} catch(err) {
					return null;
				}
			};
			/////////////////////////////////////////////////////////////////////////////////



			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			// Monitor dynamic html element creation to prevent generating <a> elements with click dispatching event
			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			document.createElement = function() {

					var newElement = originalCreateElementFn.apply(document, arguments);

					if (arguments[0] == "a" || arguments[0] == "A") {

						timeSinceCreateAElement = (new Date).getTime();

						var originalDispatchEventFn = newElement.dispatchEvent;

						newElement.dispatchEvent = function(event) {
							if (event.type != null && (("" + event.type).toLocaleLowerCase() == "click")) {
								window.pbreason = "blocked due to an explicit dispatchEvent event with type 'click' on an 'a' tag";
								// console.info(window.pbreason);
								parent.postMessage({type:"blockedWindow", args: JSON.stringify({"0": newElement.href}) }, parentOrigin);
								return true;
							}

							return originalDispatchEventFn(event);
						};

						lastCreatedAElement = newElement;

					}

					return newElement;
			};
			/////////////////////////////////////////////////////////////////////////////////




			/////////////////////////////////////////////////////////////////////////////////
			// Block artificial mouse click on frashly created <a> elements
			/////////////////////////////////////////////////////////////////////////////////
			document.createEvent = function() {
				try {
					if ((arguments[0].toLowerCase().indexOf("mouse") >= 0) && ((new Date).getTime() - timeSinceCreateAElement) <= 50) {
						window.pbreason = "Blocked because 'a' element was recently created and " + arguments[0] + " event was created shortly after";
						// console.info(window.pbreason);
						arguments[0] = lastCreatedAElement.href;
						parent.postMessage({ type: "blockedWindow", args: JSON.stringify({"0": lastCreatedAElement.href}) }, parentOrigin);
						return null;
					}
					return originalCreateEventFn.apply(document, arguments);
				} catch(err) {}
			};
			/////////////////////////////////////////////////////////////////////////////////





			/////////////////////////////////////////////////////////////////////////////////
			// Monitor full screen requests
			/////////////////////////////////////////////////////////////////////////////////
			function onFullScreen(isInFullScreenMode) {
					if (isInFullScreenMode) {
						fullScreenOpenTime = (new Date()).getTime();
						// console.info("fullScreenOpenTime = " + fullScreenOpenTime);
					} else {
						fullScreenOpenTime = NaN;
					}
			};
			/////////////////////////////////////////////////////////////////////////////////

			function isDocumentInFullScreenMode() {
				// Note that the browser fullscreen (triggered by short keys) might
				// be considered different from content fullscreen when expecting a boolean
				return ((document.fullScreenElement && document.fullScreenElement !== null) ||    // alternative standard methods
					((document.mozFullscreenElement != null) || (document.webkitFullscreenElement != null)));                   // current working methods
			}

			document.addEventListener("fullscreenchange", function () {
				onFullScreen(document.fullscreen);
			}, false);

			document.addEventListener("mozfullscreenchange", function () {
				onFullScreen(document.mozFullScreen);
			}, false);

			document.addEventListener("webkitfullscreenchange", function () {
				onFullScreen(document.webkitIsFullScreen);
			}, false);

		} inject()</script>
<body onload="ash()">
<div id="mast">
    <div id="host_sol_top"><a href="https://www.developphp.com/hosting.php"><b>☁</b> Hosting Solutions</a></div>
    <div id="mobile_top">
      <img src="./CSS Video Background Tutorial Plus Youtube Embed_files/helmet_logo_vector.png" alt="mobile_logo" onclick="window.location=&#39;https://www.developphp.com&#39;;">
      <a href="https://www.developphp.com/Table-of-Contents">Table of Contents</a>
    </div>
    <div id="mastsealborder"><div id="mastseal" onclick="window.location=&#39;https://www.developphp.com/&#39;;"><img id="sealfront" alt="seal_front" src="./CSS Video Background Tutorial Plus Youtube Embed_files/mastseal.png"><img id="sealback" alt="seal_back" src="./CSS Video Background Tutorial Plus Youtube Embed_files/mastsealback.png"></div></div>
    <div id="searchbox"><form id="searchform" action="https://www.developphp.com/search.php" method="get"><input type="hidden" name="f" id="f" value="vid"><input placeholder="search by keywords" type="text" name="q" id="q" value="" required=""><button type="submit" id="searchbtn">🔎</button></form></div>
    <div id="mastmenu">
      <button id="btn1" onclick="toggle(&#39;menu1&#39;,this)" style="background: linear-gradient(rgb(255, 230, 183), rgb(255, 189, 89)) rgb(255, 255, 255);">HTML▾</button>
      <div id="menu1" style="left: 235px; height: 0px;">
        <a href="https://www.developphp.com/lib/HTML#Fundamentals">Fundamentals</a>
        <a href="https://www.developphp.com/lib/HTML#Elements">Elements</a>
        <a href="https://www.developphp.com/video/HTML">Video Tutorials</a>
      </div>
      <button id="btn2" onclick="toggle(&#39;menu2&#39;,this)" style="background: linear-gradient(rgb(255, 230, 183), rgb(255, 189, 89)) rgb(255, 255, 255);">CSS▾</button>
      <div id="menu2" style="left: 308px; height: 0px;">
        <a href="https://www.developphp.com/lib/CSS#Fundamentals">Fundamentals</a>
        <a href="https://www.developphp.com/lib/CSS#Value-Reference">Value Reference</a>
        <a href="https://www.developphp.com/lib/CSS#Selectors">Selectors</a>
        <a href="https://www.developphp.com/lib/CSS#At-Rules">At Rules</a>
        <a href="https://www.developphp.com/lib/CSS#Modules">Modules</a>
        <a href="https://www.developphp.com/lib/CSS#Properties">Properties</a>
        <a href="https://www.developphp.com/video/CSS">Video Tutorials</a>
      </div>
      <button id="btn3" onclick="toggle(&#39;menu3&#39;,this)" style="background: linear-gradient(rgb(255, 230, 183), rgb(255, 189, 89)) rgb(255, 255, 255);">JavaScript▾</button>
      <div id="menu3" style="left: 371px; height: 0px;">
        <a href="https://www.developphp.com/lib/JavaScript#Fundamentals">Fundamentals</a>
        <a href="https://www.developphp.com/lib/JavaScript#Objects">Objects</a>
        <a href="https://www.developphp.com/lib/JavaScript#Events">Events</a>
        <a href="https://www.developphp.com/lib/JavaScript#Operators">Operators</a>
        <a href="https://www.developphp.com/lib/JavaScript#Statements">Statements</a>
        <a href="https://www.developphp.com/lib/JavaScript#Properties">Properties</a>
        <a href="https://www.developphp.com/lib/JavaScript#Methods">Methods</a>
        <a href="https://www.developphp.com/video/JavaScript">Video Tutorials</a>
      </div>
      <button id="btn4" onclick="toggle(&#39;menu4&#39;,this)" style="background: linear-gradient(rgb(255, 230, 183), rgb(255, 189, 89)) rgb(255, 255, 255);">PHP▾</button>
      <div id="menu4" style="left: 470px; height: 0px;">
        <a href="https://www.developphp.com/lib/PHP#Fundamentals">Fundamentals</a>
        <a href="https://www.developphp.com/lib/PHP#Functions">Functions</a>
        <a href="https://www.developphp.com/video/PHP">Video Tutorials</a>
      </div>
      <button id="btn5" onclick="toggle(&#39;menu5&#39;,this)" style="background: linear-gradient(rgb(255, 230, 183), rgb(255, 189, 89)) rgb(255, 255, 255);">Flash▾</button>
      <div id="menu5" style="left: 532px; height: 0px;">
        <a href="https://www.developphp.com/video/Flash">Video Tutorials</a>
      </div>
      <button id="btn6" onclick="toggle(&#39;menu6&#39;,this)" style="background: linear-gradient(rgb(255, 230, 183), rgb(255, 189, 89)) rgb(255, 255, 255);">Graphics▾</button>
      <div id="menu6" style="left: 601px; height: 0px;">
        <a href="https://www.developphp.com/video/Graphics">Video Tutorials</a>
      </div>
    </div>
</div><div id="content">
  <div id="contentbody">
    <div id="contentbodychild">
      <!--<div class="ad_mobile">
              </div> -->
      <div class="ad_mobile">
        <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- DevPHP Responsive 1 -->
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2379004690904460" data-ad-slot="5070281336" data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>      </div>
      <div class="ad_leaderboard">
        <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 728x90 -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2379004690904460" data-ad-slot="5685507840"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>      </div>
      <div id="videobox">
        <iframe src="./CSS Video Background Tutorial Plus Youtube Embed_files/XYRGcnNbrgk.html" allowfullscreen=""></iframe>
      </div>
            <h2>Video Background Tutorial Plus Youtube Embed</h2>
      <div id="db_body">
	    <aside id="ad_160x600">
          <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- WOW 160x600 Skyscraper -->
<ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-2379004690904460" data-ad-slot="8215767516"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>        </aside>
		<div>Learn to use video as HTML content backgrounds instead of using still image backgrounds. We will also demonstrate how to use Youtube videos as the video background to loop under your page content. It is simple to layer or stack HTML elements so we can apply CSS settings to make video play directly under HTML content.

Example 1: Using video that streams directly from your own web site server.
<code><span class="code-elem">&lt;!DOCTYPE html&gt;</span>
<span class="code-elem">&lt;html&gt;</span>
<span class="code-elem">&lt;head&gt;</span>
<span class="code-elem">&lt;meta charset=<span class="code-str">"UTF-8"</span>&gt;</span>
<span class="code-elem">&lt;title&gt;</span>Page With Video Background<span class="code-elem">&lt;/title&gt;</span>
<span class="code-elem"><span class="code-styletags">&lt;style&gt;</span></span>
body{ margin:0px; background:#000; }
#bg_container{ height:500px; overflow:hidden; }
#bg{ width:100%; }
#content{ position:absolute; top:0px; padding:30px; color:#FFF; text-shadow:#000 2px 2px; }
<span class="code-elem"><span class="code-styletags">&lt;/style&gt;</span></span>
<span class="code-elem">&lt;/head&gt;</span>
<span class="code-elem">&lt;body&gt;</span>
<span class="code-elem">&lt;div id=<span class="code-str">"bg_container"</span>&gt;</span>
  <span class="code-elem">&lt;video id=<span class="code-str">"bg"</span> src=<span class="code-str">"video/page_bg.mp4"</span> autoplay=<span class="code-str">"true"</span> loop=<span class="code-str">"true"</span> muted=<span class="code-str">"true"</span>&gt;</span><span class="code-elem">&lt;/video&gt;</span>
<span class="code-elem">&lt;/div&gt;</span>
<span class="code-elem">&lt;div id=<span class="code-str">"content"</span>&gt;</span>
  <span class="code-elem">&lt;h1&gt;</span>Web page with HD looping video background<span class="code-elem">&lt;/h1&gt;</span>
  <span class="code-elem">&lt;h2&gt;</span>Using CSS the video is simply placed underneath our HTML content<span class="code-elem">&lt;/h2&gt;</span>
<span class="code-elem">&lt;/div&gt;</span>
<span class="code-elem">&lt;/body&gt;</span>
<span class="code-elem">&lt;/html&gt;</span></code>

Example 2: Using Youtube video streams as content background.
<code><span class="code-elem">&lt;!DOCTYPE html&gt;</span>
<span class="code-elem">&lt;html&gt;</span>
<span class="code-elem">&lt;head&gt;</span>
<span class="code-elem">&lt;meta charset=<span class="code-str">"UTF-8"</span>&gt;</span>
<span class="code-elem">&lt;title&gt;</span>Page With Youtube Video Background<span class="code-elem">&lt;/title&gt;</span>
<span class="code-elem"><span class="code-styletags">&lt;style&gt;</span></span>
body{ margin:0px; background:#000; }
#bg_container{ height:500px; overflow:hidden; }
#bg{ width:100%; height:900px; }
#content{ position:absolute; top:0px; padding:30px; color:#FFF; text-shadow:#000 2px 2px; }
<span class="code-elem"><span class="code-styletags">&lt;/style&gt;</span></span>
<span class="code-elem">&lt;/head&gt;</span>
<span class="code-elem">&lt;body&gt;</span>
<span class="code-elem">&lt;div id=<span class="code-str">"bg_container"</span>&gt;</span>
  <span class="code-elem">&lt;iframe id=<span class="code-str">"bg"</span> src=<span class="code-str">"//www.youtube.com/embed/LuD3_umIxgw?autoplay=1&amp;amp;controls=0&amp;amp;loop=1&amp;amp;showinfo=0&amp;amp;modestbranding=1&amp;amp;disablekb=1&amp;amp;enablejsapi=1&amp;amp;playlist=PLAYLIST_ID_HERE"</span> frameborder=<span class="code-str">"0"</span>&gt;</span><span class="code-elem">&lt;/iframe&gt;</span>
<span class="code-elem">&lt;/div&gt;</span>
<span class="code-elem">&lt;div id=<span class="code-str">"content"</span>&gt;</span>
  <span class="code-elem">&lt;h1&gt;</span>Web page with HD looping video background<span class="code-elem">&lt;/h1&gt;</span>
  <span class="code-elem">&lt;h2&gt;</span>Using CSS the video is simply placed underneath our HTML content<span class="code-elem">&lt;/h2&gt;</span>
<span class="code-elem">&lt;/div&gt;</span>
<span class="code-elem">&lt;/body&gt;</span>
<span class="code-elem">&lt;/html&gt;</span></code></div>
      </div>
            <div class="ad_mobile" style="margin-top:25px;">
        <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- DevPHP Responsive 1 -->
<ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2379004690904460" data-ad-slot="5070281336" data-ad-format="auto"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>      </div>
      <div class="ad_leaderboard">
        <script async="" src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- 728x90 -->
<ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-2379004690904460" data-ad-slot="5685507840"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>      </div>
    </div>
  </div>
  <div id="rel_tuts">
    <div>
      <h3><a href="https://www.developphp.com/video/CSS">CSS Videos</a></h3>
      <h4>Background and Overlay Effects</h4>
	  <a href="https://www.developphp.com/video/CSS/Multiple-Background-Images-Tutorial" title="Multiple Background Images Tutorial">Multiple Background Images Tutorial</a><a href="https://www.developphp.com/video/CSS/Theater-Mode-Overlay-Tutorial-Javascript-Light-Switch-Toggle-Dark" title="Theater Mode Overlay Tutorial Javascript Light Switch Toggle Dark">Theater Mode Overlay Tutorial Javascript Light Switch Toggle Dark</a><a href="https://www.developphp.com/video/CSS/Fixed-Header-and-Footer-Div-Layout-Tutorial" title="Fixed Header and Footer Div Layout Tutorial">Fixed Header and Footer Div Layout Tutorial</a><a href="https://www.developphp.com/video/CSS/Linear-Gradient-Background-Tutorial" title="Linear Gradient Background Tutorial">Linear Gradient Background Tutorial</a><a href="https://www.developphp.com/video/CSS/Radial-Gradient-Background-Tutorial" title="Radial Gradient Background Tutorial">Radial Gradient Background Tutorial</a><span>Video Background Tutorial Plus Youtube Embed</span>    </div>
  </div>
  <script>
  if(_("rel_tuts").scrollHeight > _("contentbodychild").scrollHeight){
	  _("contentbodychild").style.height = _("rel_tuts").scrollHeight+"px";
  }
  </script>
  <div id="social">
    <button onclick="window.open(&#39;http://www.facebook.com/sharer/sharer.php?u=https%3A%2F%2Fwww.developphp.com%2Fvideo%2FCSS%2FVideo-Background-Tutorial-Plus-Youtube-Embed&#39;,&#39;sharer&#39;,&#39;toolbar=0,status=0,width=580,height=400&#39;);" title="Share on Facebook"></button><button onclick="window.open(&#39;http://plus.google.com/share?url=https%3A%2F%2Fwww.developphp.com%2Fvideo%2FCSS%2FVideo-Background-Tutorial-Plus-Youtube-Embed&#39;,&#39;share&#39;,&#39;toolbar=0,status=0,width=550,height=450&#39;);" title="Share on Google Plus"></button><button onclick="window.open(&#39;http://www.twitter.com/intent/tweet?url=https%3A%2F%2Fwww.developphp.com%2Fvideo%2FCSS%2FVideo-Background-Tutorial-Plus-Youtube-Embed&amp;text=CSS - Video Background Tutorial Plus Youtube Embed&#39;,&#39;tweety&#39;,&#39;toolbar=0,status=0,width=550,height=450&#39;);" title="Tweet this"></button><button onclick="window.location=&#39;mailto:?subject=CSS - Video Background Tutorial Plus Youtube Embed&amp;body=Hi, I thought you might like to see this: %0D%0Ahttps://www.developphp.com/video/CSS/Video-Background-Tutorial-Plus-Youtube-Embed&#39;;" title="Send this to an email contact"></button>
    
  </div>
  <img id="vid_thumb" src="./CSS Video Background Tutorial Plus Youtube Embed_files/mqdefault.jpg" alt="thumb">
</div>
<div id="foot">
  <div id="foot_rule"></div>
  <div id="foot_copy">
    © 2016 All Rights Reserved
  </div>
  <div id="foot_links">
    <a href="https://www.developphp.com/">Home</a> •
    <a href="https://www.developphp.com/Table-of-Contents">Table of Contents</a> •
    <a href="https://www.developphp.com/donate.php">Donate / Support</a> •
    <a href="https://www.developphp.com/terms_of_use.php">Terms of Use</a>
  </div>
  <fieldset id="affiliation"><legend>Partner Services</legend><b>☁</b><a href="https://www.developphp.com/hosting.php">Hosting Solutions</a></fieldset>
</div>
<button id="scrolltopbtn" onclick="resetScroller()" style="display: block;">🔝</button>
</body></html>